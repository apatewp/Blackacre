// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: blackacre.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type BlackacreSentenceSegmenterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *BlackacreSentenceSegmenterRequest) Reset() {
	*x = BlackacreSentenceSegmenterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blackacre_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlackacreSentenceSegmenterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlackacreSentenceSegmenterRequest) ProtoMessage() {}

func (x *BlackacreSentenceSegmenterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blackacre_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlackacreSentenceSegmenterRequest.ProtoReflect.Descriptor instead.
func (*BlackacreSentenceSegmenterRequest) Descriptor() ([]byte, []int) {
	return file_blackacre_proto_rawDescGZIP(), []int{0}
}

func (x *BlackacreSentenceSegmenterRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type BlackacreSentenceSegmenterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sentences []string `protobuf:"bytes,1,rep,name=sentences,proto3" json:"sentences,omitempty"`
}

func (x *BlackacreSentenceSegmenterResponse) Reset() {
	*x = BlackacreSentenceSegmenterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blackacre_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlackacreSentenceSegmenterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlackacreSentenceSegmenterResponse) ProtoMessage() {}

func (x *BlackacreSentenceSegmenterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blackacre_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlackacreSentenceSegmenterResponse.ProtoReflect.Descriptor instead.
func (*BlackacreSentenceSegmenterResponse) Descriptor() ([]byte, []int) {
	return file_blackacre_proto_rawDescGZIP(), []int{1}
}

func (x *BlackacreSentenceSegmenterResponse) GetSentences() []string {
	if x != nil {
		return x.Sentences
	}
	return nil
}

type BlackacreHealthCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *BlackacreHealthCheckResponse) Reset() {
	*x = BlackacreHealthCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blackacre_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlackacreHealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlackacreHealthCheckResponse) ProtoMessage() {}

func (x *BlackacreHealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blackacre_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlackacreHealthCheckResponse.ProtoReflect.Descriptor instead.
func (*BlackacreHealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_blackacre_proto_rawDescGZIP(), []int{2}
}

func (x *BlackacreHealthCheckResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type BlackacreHealthCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BlackacreHealthCheckRequest) Reset() {
	*x = BlackacreHealthCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blackacre_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlackacreHealthCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlackacreHealthCheckRequest) ProtoMessage() {}

func (x *BlackacreHealthCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blackacre_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlackacreHealthCheckRequest.ProtoReflect.Descriptor instead.
func (*BlackacreHealthCheckRequest) Descriptor() ([]byte, []int) {
	return file_blackacre_proto_rawDescGZIP(), []int{3}
}

var File_blackacre_proto protoreflect.FileDescriptor

var file_blackacre_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x61, 0x63, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x02, 0x70, 0x62, 0x22, 0x37, 0x0a, 0x21, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x61, 0x63,
	0x72, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x42,
	0x0a, 0x22, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x61, 0x63, 0x72, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x65,
	0x6e, 0x63, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x22, 0x36, 0x0a, 0x1c, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x61, 0x63, 0x72, 0x65, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x1d, 0x0a, 0x1b, 0x42, 0x6c,
	0x61, 0x63, 0x6b, 0x61, 0x63, 0x72, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0xc0, 0x01, 0x0a, 0x09, 0x42, 0x6c,
	0x61, 0x63, 0x6b, 0x61, 0x63, 0x72, 0x65, 0x12, 0x5f, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x25, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6c, 0x61,
	0x63, 0x6b, 0x61, 0x63, 0x72, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x61, 0x63, 0x72, 0x65, 0x53, 0x65, 0x6e,
	0x74, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6c, 0x61,
	0x63, 0x6b, 0x61, 0x63, 0x72, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6c,
	0x61, 0x63, 0x6b, 0x61, 0x63, 0x72, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x2b, 0x5a, 0x29,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x64, 0x65, 0x6c,
	0x6d, 0x61, 0x6e, 0x31, 0x37, 0x2f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x61, 0x63, 0x72, 0x65, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_blackacre_proto_rawDescOnce sync.Once
	file_blackacre_proto_rawDescData = file_blackacre_proto_rawDesc
)

func file_blackacre_proto_rawDescGZIP() []byte {
	file_blackacre_proto_rawDescOnce.Do(func() {
		file_blackacre_proto_rawDescData = protoimpl.X.CompressGZIP(file_blackacre_proto_rawDescData)
	})
	return file_blackacre_proto_rawDescData
}

var file_blackacre_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_blackacre_proto_goTypes = []interface{}{
	(*BlackacreSentenceSegmenterRequest)(nil),  // 0: pb.BlackacreSentenceSegmenterRequest
	(*BlackacreSentenceSegmenterResponse)(nil), // 1: pb.BlackacreSentenceSegmenterResponse
	(*BlackacreHealthCheckResponse)(nil),       // 2: pb.BlackacreHealthCheckResponse
	(*BlackacreHealthCheckRequest)(nil),        // 3: pb.BlackacreHealthCheckRequest
}
var file_blackacre_proto_depIdxs = []int32{
	0, // 0: pb.Blackacre.GetSentences:input_type -> pb.BlackacreSentenceSegmenterRequest
	3, // 1: pb.Blackacre.HealthCheck:input_type -> pb.BlackacreHealthCheckRequest
	1, // 2: pb.Blackacre.GetSentences:output_type -> pb.BlackacreSentenceSegmenterResponse
	2, // 3: pb.Blackacre.HealthCheck:output_type -> pb.BlackacreHealthCheckResponse
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_blackacre_proto_init() }
func file_blackacre_proto_init() {
	if File_blackacre_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_blackacre_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlackacreSentenceSegmenterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blackacre_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlackacreSentenceSegmenterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blackacre_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlackacreHealthCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blackacre_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlackacreHealthCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_blackacre_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_blackacre_proto_goTypes,
		DependencyIndexes: file_blackacre_proto_depIdxs,
		MessageInfos:      file_blackacre_proto_msgTypes,
	}.Build()
	File_blackacre_proto = out.File
	file_blackacre_proto_rawDesc = nil
	file_blackacre_proto_goTypes = nil
	file_blackacre_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BlackacreClient is the client API for Blackacre service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BlackacreClient interface {
	GetSentences(ctx context.Context, in *BlackacreSentenceSegmenterRequest, opts ...grpc.CallOption) (*BlackacreSentenceSegmenterResponse, error)
	HealthCheck(ctx context.Context, in *BlackacreHealthCheckRequest, opts ...grpc.CallOption) (*BlackacreHealthCheckResponse, error)
}

type blackacreClient struct {
	cc grpc.ClientConnInterface
}

func NewBlackacreClient(cc grpc.ClientConnInterface) BlackacreClient {
	return &blackacreClient{cc}
}

func (c *blackacreClient) GetSentences(ctx context.Context, in *BlackacreSentenceSegmenterRequest, opts ...grpc.CallOption) (*BlackacreSentenceSegmenterResponse, error) {
	out := new(BlackacreSentenceSegmenterResponse)
	err := c.cc.Invoke(ctx, "/pb.Blackacre/GetSentences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blackacreClient) HealthCheck(ctx context.Context, in *BlackacreHealthCheckRequest, opts ...grpc.CallOption) (*BlackacreHealthCheckResponse, error) {
	out := new(BlackacreHealthCheckResponse)
	err := c.cc.Invoke(ctx, "/pb.Blackacre/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlackacreServer is the server API for Blackacre service.
type BlackacreServer interface {
	GetSentences(context.Context, *BlackacreSentenceSegmenterRequest) (*BlackacreSentenceSegmenterResponse, error)
	HealthCheck(context.Context, *BlackacreHealthCheckRequest) (*BlackacreHealthCheckResponse, error)
}

// UnimplementedBlackacreServer can be embedded to have forward compatible implementations.
type UnimplementedBlackacreServer struct {
}

func (*UnimplementedBlackacreServer) GetSentences(context.Context, *BlackacreSentenceSegmenterRequest) (*BlackacreSentenceSegmenterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSentences not implemented")
}
func (*UnimplementedBlackacreServer) HealthCheck(context.Context, *BlackacreHealthCheckRequest) (*BlackacreHealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}

func RegisterBlackacreServer(s *grpc.Server, srv BlackacreServer) {
	s.RegisterService(&_Blackacre_serviceDesc, srv)
}

func _Blackacre_GetSentences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlackacreSentenceSegmenterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackacreServer).GetSentences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Blackacre/GetSentences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackacreServer).GetSentences(ctx, req.(*BlackacreSentenceSegmenterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blackacre_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlackacreHealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackacreServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Blackacre/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackacreServer).HealthCheck(ctx, req.(*BlackacreHealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Blackacre_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Blackacre",
	HandlerType: (*BlackacreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSentences",
			Handler:    _Blackacre_GetSentences_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _Blackacre_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blackacre.proto",
}
